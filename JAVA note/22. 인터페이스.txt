1. 인터페이스(interface)
    1) 일종의 추상클래스이긴 하나 멤버의 주류가 추상메서드임.
        - 모든 메서드가 추상 메서드로 선언됨.(public abstract)생략가능
        - 모든 변수는 상수로 선언됨.(public static fianl)생략가능
    2) 상속 관계가 아닌 클래스에 기능을 제공하는 구조임.
    3) 멤버
        - 추상메서드, 상수 
        - 디폴트 메서드, 정적 메서드, private 메서드 멤버도 추가되어 활용성이 높아짐.

        interface A {                               interface A {
            public static final int a = 2;  ==>             int a = 2;
            public abstract void say();                     void say();
        }                                           }
    4) 생성자가 없음. => 인스턴스를 만들수 없음.
    5) 표준을 제시하여, 그 규칙에 맞게 구현하도록 함.
    6) 다형성 개념이 적용됨.

2. 인터페이스 정의와 구현
    1) 인터페이스 구현
        - extends를 사용하지 않고 implements를 사용함.
        - 클래스를 상속하는 것과 동일한 개념.
        - 인터페이스도 일종의 조상임(다형성 개념이 적용됨.)
        - 구현클래스는 반드시 인터페이스에 선언되어 있는 추상메서드를 재 정의 해야함.
    2) 형변환
        - 인터페이스를 구현한 클래스는 인터페이스 형으로 선언한 변수로 형변환이 이루어짐(자동 업캐스팅)
            Calc calc = new CompleteCalc();
        - 상속에서의 형변환과 동일한 의미.
        - 형변환되는 경우 인터페이스에 선언된 메서드만 사용 가능함.

3. 인터페이스가 하는 역할
    1) 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
    2) 일종의 클라이언트 코드와의 약속이며 클래스나 프로그램이 제공하는 명세(specification)
    3) 클라이언트 프로그램은 인터페이스에 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할수 있음.
    4) 인터페이스를 구현한 다양한 객체를 사용함 - 다형성
    5) 예) JDBC 인터페이스

4. 인터페이스를 활용하여 다형성 구현(dao : database access object 구현하기)
    1) 하나의 인터페이스를 여러 객체가 구현하게 되면 클라이언트 프로그램은 
       인터페이스의 메서드를 활용하여 여러 객체의 구현을 사용할 수 있음. (다형성)
    2) 인터페이스를 활용한 dao구현하기
        - DB에 회원정보를 넣는 dao를 여러 DB 제품에 지원될수 있게 구현함.
        - 환경파일(db.properties)에서 database의 종류에 대한 정보를 읽고 그 정보에 맞게 dao인스턴스를 생성하여 실행 될 수 있게 함.

5. 인터페이스의 멤버
    1) 상수
        - 모든 변수는 상수로 변화됨.
        - public static final
    2) 추상메서드
        - 모든 선언된 메서드는 추상 메서드
        - public abstract
    3) default 메서드 (java 8이후)
        - 구현을 가지는 메서드
        - 공통으로 사용할 수 있는 기본 메서드
        - default 키워드 사용
        - 구현하는 클래스에서 재정의 할수도 있음.
    4) 정적 메서드 (java 8이후)
        - 인스턴스 생성과 상관없이 인터페이스 타입으로 사용할 수 있는 메서드
    5) private 메서드 (java 9이후)
        - 인터페이스를 구현한 클래스에서 사용하거나 재정의 할수 없음
        - 인터페이스 내부에서만 사용하기 위해 구현하는 메서드
            - default 메서드나 정적 메서드에서 사용함.

6. 여러 인터페이스 구현(implements), 인터페이스의 상속
    1) 자바의 인터페이스는 구현 코드가 없기 때문에 하나의 클래스가 여러 인터페이스를 구현할수 있다.
    2) 디폴트 메서드가 중복되는 경우는 구현하는 클래스에서 재정의하여야 함.
    3) 여러 인터페이스를 구현한 클래스중 인터페이스 타입으로 형변환되는 경우 
       해당 인터페이스에 선언된 메서드만 사용 가능함.
    4) 인터페이스의 상속
        - 인터페이스 사이에도 상속을 사용할수 있음.
        - extends 키워드를 사용
        - 인터페이스는 다중 상속이 가능함.(타입 상속)
    5) 클래스 상속과 인터페이스 구현 함께 쓰기
        - 
