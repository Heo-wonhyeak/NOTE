1. 객체 지향 프로그래밍
    1) 추상화(Abstraction)와 일반화
        - 어떤 영역에서 필요로 하는 속성이나 기능을 추출하는 작업
        - 데이터 구조,표현방법에 대한 추상화
        - 추상화의 의도는 단순화작업, 일반화의 의도는 공통점을 뽑는것
    2) 캡슐화(Encapsulation)
        - 데이터를 감싸서 외부에서 사용 가능한 부분만 제공(information hiding)
        - 사용하는 코드(클라이언트 코드)가 세부적인 사항을 알 필요가 없음.
        - private : 나만 볼수 있는 것, 같은 클래스 내부에서만 접근 가능
    3) 상속성(Inheritance)
        - 일반적인(general) 개념의 객체에서 보다 구체적인(specific) 개념의 객체의 관계를 표현
        - 상위 클래스 속성과 기능을 하위 클래스에서 사용하거나 재정의 할수 있음.
    4) 다형성(Polymorphism)
        - 같은 메시지, 같은 구현에 대해 각 객체가 다른 표현과 결과를 나타내는 것.
        - 조상 타입으로 자손 타입의 객체들을 접근할수 있는 것.

2. java.lang 패키지
    0) 프로그래밍시 import하지 않아도 자동으로 import됨.
       많이 사용하는 기본 클래스들이 속한 패키지.
    1) Object
        - 모든 클래스가 상속 받음.
        - toString() 메서드
            - 생성된 객체의 클래스명과 주소(해시코드) 보여줌.
            - 보통은 객체 정보를 String으로 override해서 사용한다.(재 정의)
        - equals() 메서드
            - 기본적으로 주소값이 같은지 비교하지만, 주소값으로 무언가 하는것이 없기때문에 내용으로 override해서 사용한다.
    2) String(수정불가), StringBuffer(수정가능), StringBuilder(수정가능)
    3) Number, Integer, Long, Float, Double, Character
        - 래퍼 클래스 (Wrapper class)
            - 기본 데이터형 (정수형, 문자형, 논리형)에 대응하는 클래스
            - 기본 자료형에 대해서 객체로서 인식되도록 '포장'했다는 의미.
            - 다양한 메서드 추가
                - 값 변환, 형 변환, 진법 변환
                - 상수 (MAX_VALUE, MIN_VALUE)
                - 컬렉션 프레임워크에서 사용
            - 문자열 변환
                - 각각 문자열을 수치형으로 변환하는 메서드 (static 메서드)
                    - parseByte() : 문자열을 byte형으로 변환
                    - parseShort() : 문자열을 short형으로 변환
                    - parseInt()    ex) int a = Integer.parseInt(str);
                    - parseLong()
                    - parseDouble()
                    - parseFloat() ...
            - 박싱과 언박싱
                - 기본 타입                 래퍼클래스
                    byte                    Byte
                    short                   Short
                    int                     Integer
                    long                    Long
                    float                   Float
                    double                  Double
                    char                    Character
                    boolean                 boolean
    4) System
    5) Math
        - 모두 static으로 선언 (객체를 따로 생성할 필요 없이 사용 가능)
    6) Thred

3. 가변인수 (variable length argument)
    1) 인수 개수가 가변적인것
        - 말줄임표 ...

4. 어노테이션
    1) 자바 소스 코드에 추가하여 사용할수 있는 메타 데이터의 일종임.(코드를 설명하기 위한)
    2) @기호를 앞에 붙여서 사용함.
        - @Override
        - @Deprecated
            - 이 어노테이션이 적용된 메서드는 문제의 발생 소지가 있거나
              개선된 기능의 다른것으로 대체되어 더 이상 사용을 권장하지 않음.
            - 호환성 유지를 위해서 존재하지만, 이후에 사라질 수 있는 클래스 또는 메서드
        - @SuppressWarnings
            - Deprecated 관련 경고 등 특정 메시지를 지정하면 해당 경고 메시지를 출력하지 말라는 의미.

5. String 클래스
    1) 선언하는 두가지 방법
        - 문자열 리터럴을 직접 대입하는 객체
            - String Constant Pool이라는 곳에 분리하여 따로 관리함.(값이 같으면 주소가 같음)
        - new 연산자
    2) 문자열형(String) 변수의 참조 비교
        - ==(비교연산자) : 객체가 가진 문자열의 내용을 비교한 것이 아니라 객체의 참조값(같은객체인지)를 비교함.
    3) 문자열형 변수의 내용 비교
        - equals() 
        - compareTo() 
    4) 메서드 (기존것이 바뀌는 것이 아니라 새로운 변수에 할당.)
        - 문자열 연결
            - concat()
        - 문자열에서 문자 찾기
            - indexOf()
        - 문자열 자르기
            - subString()
        - 지정한 문자 반환
            - char charAt(int index)
        - 문자열 포함여부 조사
            - boolean contains(String s)
        - 시작하는 문자열이 s인지 조사
            - boolean startsWith(String s)
        - 끝나는 문자열이 s인지 조사
            - boolean endWith(String s)
        - 문자열 앞뒤에 있는 공백 제거
            - String trim()

6. StringBuilder, StringBuffer
    1) 기능 동일 
    2) 한번 생성된 String은 불변(immutable)하지만, 내부적으로 가변적인 char[]를 멤버변수로 가짐.
        - 문자열을 여러번 연결하거나, 변경할때 사용하면 유용함.
    3) StringBuffer는 멀티 쓰레드 프로그래밍에서 동기화(Synchronization)를 보장함.
       StringBuilder는 단일 쓰레드 프로그램에서 사용 권장.
