1. GitHub
    1) 협업시 중요한 개념
        - Git의 원격 저장소 부분임.
            - Git의 핵심임.
    2) 원격 저장소 제공
    3) Git을 이용한 프로젝트 종합 관리 가능
    4) 할수 있는 것 (협업 플랫폼)
        - 개발
        - 일반적인 여러 활동에 사용

2. 포크(Fork)
    - 다른 사람의 원격 저장소를 내 계정으로 복사
        - 내 파일로 옮겨 졌기에 자유롭게 파일 생성, 수정 반영이 가능함.

3. 원격 저장소.
    - 원격 저장소 내용을 로컬 저장소로 가져옴.
    - 로컬 저장소를 원격 저장소와 연결, 보냄, 수정, 병합 등.
    - git clone(원격 -> 로컬 / 그대로 복사) , git remote(연결 명령어) , git push(로컬 -> 원격), git fetch(원격 -> 로컬 /차이점만 복사) , git pull(원격 -> 로컬)

4. git clone 
    1) 원격 저장소 내용 => 로컬 저장소로 가져오기
    2) GitHub에서 로컬 환경으로 복사하는 것
        - vs 포크(fork) : GitHub에서 원격 저장소 복사하는 것.
    3) origin
        - 원격 저장소의 별병.

5. git remote
    1) 로컬 저장소와 원격 저장소를 연결하기.
    2) 협업 
        - 빈 원격 저장소 생성 
        - 최소한의 뼈대 프로젝트 생성 (구조 만들기)
        - coworker 모두가 원격 저장소를 복제(git clone)
        - 각자 분담 부분 작업 진행
    3) git remote add origin(저장소별칭) 원격저장소주소
    4) 원격저장소와 로컬 저장소 연결확인
        - git remote -v

6. git push
  1) 로컬 작업 내역을 원격 저장소에 올리기
  2) 작업 결과물을 개발자들과 공유
  3) 기본적으로 커밋들을 원격 저장소의 main 브랜치에 업로드 
  4) 형식
    - git push원격 저장소 별칭 로컬브랜치이름
      - git push origin --all
        - --all : 로컬의 모든 브랜치를 푸시하는 것임.

7. git fetch
    1) 원격 저장소에 당연히 다른 개발자들이 커밋할 경우가 생김.
        - 내 로컬 저장소와 원격 저장소 내용에 차이가 발생함.
        - => 이런경우 git은 푸시 불허함. 

        - 먼저 로컬 저장소의 커밋들을 원격 저장소와 맞춰야 함.
        - => 이때 하는것이 패치(fetch) / 패치했으면 merge 진행 해야함.(기능 로컬로 들어오지 않음)
    2) 작업 순서
        - 로컬로 가져온 커밋들
        - 자신의 기존 로컬 저장소 작업과 병합
        - 원격 저장소에 제출

8. git pull
    1) 원격저장소 정보(커밋들) 가져오면 (fetch)
    2) 자동으로 로컬 브랜치에 병합(merge)까지 수행하면 (pull)
        - 어떤 내용이 병합되면서 바뀌게 되는지 알수 없음.