1. 소개
    1) 기존에 XML에서 빈 설정을 애너테이션을 이용해서 자바 코드에서 설정하는 방법
    2) 기능이 복잡해짐에 따라 XML에서 설정하는 것보다 유지보수에 유리함
    3) 현재 애플리케이션 개발시 XML 설정 방법과 애너테이션 방법을 혼합해서 사용함

2. Bean 등록 메타정보 구성 전략
    1) XML 단독 사용
        - 모든 Bean 을 명시적으로 XML에 등록하는 방법
    2) XML과 빈 스캐닝(Bean Scanning) 의 혼용
        - Bean으로 사용될 클래스에 특별한 애노테이션을 부여해주면 
          이런 클래스를 자동으로 찾아서 Bean으로 등록함.
            - 빈 스캐닝을 통한 자동인식 Bean 등록기능이라고 함.
        - 애노테이션을 부여하고 자동 스캔으로 빈을 등록하면 개발속도 향상시킴

3. annotation-based programming
    1) @Controller, @RequestMapping 등 다양한 애노테이션 제공함
    2) 애노테이션을 통한 요청 연결, 데이터 가공, 예외 처리 등 구성함

4. 애노테이션
    1) 코드의 메타-데이터(Metadata)로 작성, 컴파일 또는 런타임에 활용됨
    2) JDK가 제공하는 빌트인(Built-in)과 직접 작성하는 커스텀(Custom)으로 분류됨.
    3) 패키지, 클래스, 메소드, 필드에 선언할 수 있음.
    4) @{AnnotationName }으로 표기함

5. 스프링 애너테이션 제공 클래스
    1) 브라우저 URL 요청처리 애너테이션 관련 클래스 
        - DefaultAnnotationHandlerMapping
            - 클래스 레벨에서 @RequestMapping을 처리함
        - AnnotationMethodHandlerAdapter
            - 메서드 레벨에서 @RequestMapping을 처리함

6. <context:component-scan>태그
    1) 패키지 이름을 지정하면 애플리케이션 실행시 해당 패키지에서 애너테이션으로 지정된 클래스를 빈으로 만들어줌
    2) 사용형식
        -<context:component-scan base-package="패키지이름" />

7. 여러가지 스테레오 타입 애너테이션 (Bean 등록 Annotation)
    1) @Controller
        - 프리젠테이션 레이어, 웹 애플리케이션에서 웹 요청과 응답을 처리하는 클래스
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 컨트롤러 빈으로 자동 변환함
        - Controller 클래스 정의
        - @Controller("id") : id 값은 임의 지정 가능하지만 정의하지 않을경우 class 이름에서 맨앞 대문자를 소문자로 변환해 사용
            - ex) public class MainController {} : id = mainController
    2) @Service
        - 서비스 레이어, 비즈니스 로직을 가진 클래스
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 서비스 빈으로 자동 변환함
    3) @Repository
        - 퍼시스턴스(persistence) 레이어, 영속성을 가지는 속성(파일, DB)을 가진 클래스
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 DAO 빈으로 자동 변환함
    4) @Component
        - 컴포넌트를 나타내는 일반적인 스테레오 타입으로 <bean>태그와 동일한 역할을 함
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 빈으로 자동 변환함

    5) @Controller, @Service, @Repository 는 @Component의 구체화된, 더 특정한 use-case 형태임.

8. 관련 애노테이션
    1) @RequestMapping
        - HTTP 요청 URL을 처리할 Controller 정의
        - @RequestMapping("/~~") : contaxtPath 다음의 뎁스가 /~~ 이면 해당 컨트롤러 빈을 요청함
    2) @RequestParam
        - 매개변수 갯수가 많아지면 일일히 getParameter()를 이용하는 방법은 불편하므로 @RequestParam을 메서드에 적용해
          쉽게 Parameter값을 얻을 수 있음
        - HTTP 요청에 포함된 파라미터 참조시 사용
        - 적용시 required 속성을 생략하면 기본 값은 true 
            - 메서드 호출 시 반드시 지정한 이름의 매개변수를 전달해야 함
                - 매개변수가 없으면 예외가 발생
        - required 속성을 false로 설정하면
            - 메서드 호출시 지정한 이름의 매개변수가 전달되면 값을 저장하고 없다면 null을 할당함 (예외발생 x)

        - Map에 매개변수 값 설정하기
            - 전송되는 매개변수 수가 많을 경우 Map에 바로 저장해서 사용 
