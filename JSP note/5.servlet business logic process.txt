1. 서블릿의 비지니스 처리 작업 
    1) 서블릿이 클라이언트로부터 요청을 받으면 그 요청에 대해 작업을 수행하는것.
    2) 웹 프로그램에서 대부분의 비지니스 처리 작업은 DB 연동 관련 작업, 
       그 외에 다른 서버와 연동하여 데이터를 얻는 작업도 수행.
    3) 서블릿의 가장 핵심 기능
    4) 예
        - 웹 사이트 회원 등록 요청 처리 작업
        - 웹 사이트 로그인 요청 처리 작업
        - 쇼핑몰 상품 주문 처리 작업
    5) 처리 과정
        - 클라이언트로부터 요청 받음
        - DB 연동과 같은 비즈니스 로직 처리
        - 처리 결과를 클라이언트에게 돌려줌

2. 서블릿의 데이터베이스 연동하기 
    0) Servlet, DAO(Data Access Object), VO(Value Object), DB
    1) 서블릿으로 회원 정보 테이블의 정보 조회
        - 순서 
            1] 웹 브라우저로 서블릿에게 회원 정보 요청
            2] Memberservlet은 요청을 받음
            3] MemberDAO 객체를 생성 후 listMembers() 메서드 호출함
            4] listMembers() 에서 connDB() 메서드로 데이터베이스와 연결 SQL문 실행함
            5] 조회된 회원 정보를 MemberVO() 속성에 설정 후 ArrayLis에 add 함
            6] ArrayList의 MemberVO를 차례대로 가져와 회원 정보를 HTML 태그 문자열로 만듦
        - PrepareStatement를 이용한 회원 정보 조회
            - Statement 상속하므로 지금까지 사용한 메서드를 그대로 사용함.
            - 성능을 향상시킴
            - SQL문을 '?'를 넣을 수 있으므로 '?'의 값만 바꾸어 손쉽게 설정 가능
    2) DataSource 이용해 회원 정보 등록하기
        - PrepareStatement를 이용한 
            - ?는 쿼리의 순서대로 대응한다
                ex) INSERT INTO T_MEMBER (ID,PWD,NAME,EMAIL) VALUES ('test','0824','test','test@naver.com');
                    -> ID,PWD,NAME,EMAIL
            - 각 ?에 대응하는 값을 지정하기 PrepareStatement의 setter를 이용함
            - setter() 메서드의 첫번째 인자는 '?'의 순서를 지정함
            - ?의 인자는 1부터 시작함(zero base아님)
               - ex) setString(1, id);	=> 첫번째가 1
            - 

3. 데이터 엑세스 공통 개념
    1) DAO 패턴을 적용하여 비지니스 로직과 데이터 액세스 로직을 분리하는 것이 원칙임
    1) DAO(Data Access Object)패턴
        - 서비스 계층에 영향을 주지 않는 데이터 액세스 기술 파트 전담
        - 비지니스 로직을 가진 엔터프라이즈 애플리케이션이라면 데이터 엑세스 계층을 DAO 패턴으로 분리함.

4. 커넥션 풀(Connection pool)로 성능 개선 : DataSource 이용해 DB 연동
    1) 기존 : 요청이 있을 때마다 DB와 새로 연결했다가 해제함
        - Connection 객체를 생성할때마다 네트워크 통신이 이루어지며 사용자 인증 같은 시간이 걸리는 작업 수반됨
        - 빈번한 연결과 해제는 시스템 성능에 큰 영향을 미침
    2) Connection pool 
        - Connection 객체를 미리 생성해 풀(pool)에 넣어놓고, 요청이 있을 때 이미 생성된 Connection 객체를 가져다 사용하는 기법
        - 사용이 완료된 객체는 연결을 해제하는 것이 아니라 풀에 반납하여 필요할 때 재사용할 수 있도록 함.

        - JNDI (Jave Naming and Directory Interface)
            - 자바 소프트웨어에서 객체나 데이터를 전체 경로를 몰라도 '이름'만으로 찾아 사용할 수 있는 디렉토리 서비스임
            - 이름과 실제 객체와의 연결은 외부의 설정 파일에서 관리함

        - WAS의 JNDI를 통해 커넥션 풀을 사용하는 절차
            - WAS(톰캣)가 시작할 때 sever.xml이나 context.xml에 설정한 대로 커넥션 풀을 생성함
            - JSP, Servlet 코드에서 JNDI 서버(WAS가 제공)로 부터 데이터소스 객체를 얻어옴
            - 데이터소스로부터 커넥션 객체를 가져옴
            - DB 작업 수행 
            - 모든 작업이 끝나면 커넥션 객체를 풀로 반환함.

        - 커넥션 풀을 사용하면 WAS가 시작될 때마다 미리 생성한 커넥션 객체를 사용
            - 웹 애플리케이션 실행 속도가 빨라짐
            - 클라이언트 동시 요청이 많아지더라도 좀 더 수월하게 응답할 수 있음
            - 성능 향상 효과 큼
