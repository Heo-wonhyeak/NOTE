0. HTTP(Hyper text Transfer Protocol)
    1) 단순하고 읽기 쉬움 (텍스트 기반의 프로토콜)
    2) 상태를 유지하지 않음 (stateless)
        - 클라이언트 정보를 저장하지 않음
    3) 확장 가능함 
        - 커스텀 헤더(header) 추가 가능

1. 서블릿 요청과 응답 API
    1) HttpServletRequest
        - 요청과 관련된 클래스
    2) HttpServletResponse
        - 응답과 관련된 클래스

2. <form> 태그
    1) method : 데이터를 전송할 때 전송 방법을 지정함. GET 또는 POST로 지정함.(default : GET)
    2) action : 데이터를 전송할 서블릿이나 JSP를 지정함. 서블릿으로 전송할 때는 매핑 이름을 사용함.

3. HttpServletRequest의 <form>태그로 전송된 데이터를 받아오는 메서드
    1) String getParameter(String name)
        - name의 값을 알고 있을때, 그리고 name에 대한 전소오딘 값을 받아오는 데 사용함
    2) String[] getParameterValues(String name)
        - 같은 name에대해 여러개의 값을 얻을 때 사용함
    3) enumeration getParameterNames()
        - 전송되는 데이터가 많은 경우 name 값을 일일히 기억해야 할 필요없이 이용해서 name을 얻음

4. 서블릿의 응답 처리
    1) doGet()이나 doPost() 메서드 안에서 처리함
    2) HttpServletResponse 객체를 이용함
    3) 클라이언트에게 전송할 데이터 종류(MIME-TYPE)를 지정함
        - 미리 지정해 놓은 데이터 종류로 서블릿에서 브라우저로 전송시 설정해 사용함
            - HTML로 전송시 : text/html
            - 일반 텍스트로 전송 시 : text/plain
    
5. 웹 브라우저에서 서블릿으로 데이터 전송 방식
    1) GET 방식                                              POST 방식
   ------------------------------------------------------------------------------------------------
     - 서블릿에 데이터를 전송할 때 데이터가 URL 뒤에                - 서블릿에 데이터를 전송할 때 TCP/IP 프로토콜 
       name=value 형태로 전송됨                                데이터를 요청메시지의 body영역에 숨겨진 채 전송됨
     - 여러개의 데이터를 전송할 때는 '&'로 구분하여 전송             - 보안에 유리함 (암호화, HTTPS)
     - 보안이 취약함(URL 데이터가 노출됨으로)                     - 데이터 전송 자리수(용량) 제한이 없음!
     - 전송할 수 있는 데이터는 최대 255자임                       - 처리 속도가 GET방식 보다 느림
     - 기본 전송방식 / 사용성이 쉬움                             - 서블릿에서는 doPost()로 전송된 데이터를 처리 
     - 서블릿에서는 doGet()으로 전송된 데이터를 처리               - 서버에 데이터를 올리기 위한 설계
     - 서버의 리소스를 가져오기 위해 설계                         - 데이터 공유에 불리
     - Query String을 통해 데이터를 전달 (소용량)                   ex) 게시판 글쓰기, 로그인, 회원가입
     - 데이터 공유에 유리
        ex) 검색엔진에서 검색단어 전송에 이용