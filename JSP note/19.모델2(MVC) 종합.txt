1. 웹 애플리케이션 모델
    1) 애플리케이션 개발시 일반적으로 많이 사용하는 표준화된 소스 구조
    2) 모델의 종류에는 모델1과 모델2가 있음

2. MVC 디자인 패턴
    1) 일반 PC 프로그램 개발에 사용되는 디자인 패턴을 웹 애플리케이션에 도입한 것 
    2) 각 기능 분리되어 있어 개발 및 유지보수가 상대적으로 편리함

3. 구현 순서
    1) 목록보기
    2) 글쓰기
    3) 상세보기
    4) 파일 다운로드 / 업로드
    5) 삭제하기
    6) 수정하기

4. 게시판 구상
    1) 비회원제
        - 회원인증 없이 누구나 글을 작성할 수 있음
        - 글쓰기 시 비밀번호 입력이 필수임
        - 비밀번호를 통해 수정, 삭제 가능
    2) 자료실
        - 글쓰기 시 파일 첨부
        - 파일 첨부시 정해진 용량 이상 업로드 금지
        - 첨부된 파일 다운로드
    3) 프로세스

                _______________________________________________________________ 
                |                                                             |
            \|/                                                            |
            목록보기화면 --------------------> 글쓰기 화면 --------------------> 글쓰기 처리
        (ListController.java                                            
            list.jsp)      글쓰기 클릭      (write.jsp)     작성 완료 클릭     (WriteController.java)
                |
                | 제목 클릭
                |
            \|/
            상세화면보기 --------------------> 수정 하기 ---------------------> 수정 처리
        (ViewController.java 수정 클릭      (edit.jsp)     작성 완료 클릭      (EditController.java)
            view.jsp)                    파일다운로드
                | /|\                (DownloadController.java)                |
                |  ------------------------------------------------------------
                | 삭제 클릭
                |
            \|/
            삭제 처리
        (DeleteController.java
        deleteProcess.jsp)

    4) 요청명
         기능       매핑방법            요청명                  컨트롤러(서블릿)                뷰경로
        ------------------------------------------------------------------------------------------------------
        목록보기    web.xml          /board/list.do         ListController              /board/list.jsp     
        글쓰기      web.xml         /board/write.do         WriteController             /board/write.jsp
        상세보기    애너테이션          /board/view.do         ViewController              /board/view.jsp
        비밀번호검증 애너테이션         /board/pass.do          PassController              /board/pass.jsp
        수정       애너테이션         /board/edit.do          EditController              /board/edit.jsp
        삭제       애너테이션                                 PassController
        다운로드    애너테이션         /board/download.do      DownloadController

5. 페이징 (Paging)
    1) rownum
        - 가상의 컬럼
        - select 쿼리문으로 추출 하는 데이터(row)에 순차적으로 부여되는 순번(num)을 말함.
        - 컬럼은 만든 적이 없지만 순번이 출력됨

    2) 게시판에서 목록을 보통 10~20개 정도씩 나눠 페이지별로 출력함
        => 이런 기법을 페이징이라고 함.

    3) 페이징 처리 위한 두가지 기본 설정값
        - 한 페이지에 출력할 게시물 갯수    === 상수 (ex. 10)
        - 한 화면(블록)에 출력할 페이지 번호의 개수 === 상수 (ex. 5)
            - web.xml 정의 예시
                <context-param>
                    <param-name>POSTS_PER_PAGE</param-name> <!-- 출력할 게시물 상수값 이름 -->
                    <param-value>10</param-value>
                </context-param>
                <context-param>
                    <param-name>PAGES_PER_BLOCK</param-name> <!-- 출력할 페이지 상수값 이름 -->
                    <param-value>5</param-value>
                </context-param>

    4) 페이징 구현
        1] 저장된 전체 레코드 수 카운트
        2] 각 페이지에서 출력할 게시물 범위 계산
            - ex
                - 첫번째 페이지
                    - 시작값 : (1-1) * 출력할 게시물 상수값 +1
                    - 종료값 : 1 * 출력할 게시물 상수값
                - 두번째 페이지
                    - 시작값 : (2-1) * 출력할 게시물 상수값 +1
                    - 종료값 : 2 * 출력할 게시물 상수값
            - 일반화
                - n번째 페이지
                    - 시작값 : (n-1) * 출력할 게시물 상수값 +1
                    - 종료값 : n * 출력할 게시물 상수값
        3] 전체 페이지 수 계산
            - ex
                - 게시물 수가 총 105개 페이지당 10개씩
                    - 페이지 수 : Math.ceil(105/10) = Math.ceil(10.5) = 11
                        - Math.ceil = 올림
            - 일반화
                - Math.ceil(전체 게시물수 / 출력할 게시물 상수값)

        4] 이전 페이지 블록 바로가기 출력
            - ex
                - 1페이지 일때
                    - pageTemp = ((1-1)/출력할 페이지 상수값)*출력할 페이지 상수값 + 1 = 1
                - 5페이지 일때
                    - pageTemp = ((5-1)/출력할 페이지 상수값)*출력할 페이지 상수값 + 1 = 1
                        = pageTemp 가 1이면 첫번째 페이지 블록을 뜻함
                            => 이전 페이지 블록 바로가기를 출력하지 않음
                - 6페이지 일때
                    - pageTemp = ((6-1)/출력할 페이지 상수값)*출력할 페이지 상수값 + 1 = 2
                - 10페이지 일때
                    - pageTemp = ((10-1)/출력할 페이지 상수값)*출력할 페이지 상수값 + 1 = 2
                        = pageTemp 가 1이 아닐때 두번째 이상 페이지 블록을 뜻함
                            => 이전 페이지 블록 바로가기를 출력
            - 일반화
                - n번째 페이지
                    - pageTemp = ((n-1)/상수값)*상수값 + 1

        5] 각 페이지 번호 출력
            - ex : 5개씩 출력하는 페이지의 경우
                - pageTemp가 2 일때 : "1 2 3 4 5"를 출력
                - pageTemp가 2 일때 : "6 7 8 9 10"을 출력

        6] 다음 페이지 블록 바로가기 출력

6. 컨트롤러(서블릿) 작성 - 글 목록

7. 글쓰기
    1) 파일 업로드 추가

8. 상세보기

9. 파일 다운로드

10. 삭제하기