1. JSTL 이란?
    1) JSP Standard Tag Library
    2) 조건문, 반복문 등을 처리해주는 태그를 모아 표준으로 만들어 놓은 라이브러리

2. JSTL 제공 태그 종류
    1) Core 태그
        - 변수 선언, 조건문/반복문, URL 처리
        - 접두어 : c
    2) Formatting 태그
        - 숫자, 날짜, 시간 포맷 지정
        - 접두어 : fmt
    3) XML 태그
        - XML 파싱 용도
        - 접두어 : x
    4) Function 태그
    5) SQL 태그

3. 코어(Core) 태그
    1) 변수 선언, 조건문, 반복문 등을 대체하는 태그 제공
        - set 
            - EL에서 사용할 변수 설정
            - setAttribute() 메서드와 동일 기능
        - remove
            - 설정한 변수 제거
            - removeAttribute() 메서드와 동일 기능
        - if
            - 단일 조건문 처리
            - else문 없음
        - choose
            - 다중 조건문 처리
            - when~otherwise 태그가 하위에 있음
        - forEach
            - 반복문 처리 
        - forTokens
            - 구분자로 분리된 각각의 토큰 처리할때 사용
            - 자바의 StringTokenizer 클래스와 동일 기능
        - import
            - 외부 페이지 삽입
        - redirect
            - sendRedirect() 메서드와 동일
        - url
        - out
        - catch

4. <c:set> 태그
    1) EL에서 사용할 변수나 자바빈즈를 생성할 때 사용
    2) 일반화
        - <c:set var="변수명" value="값" scope="영역" />
        - <c:set var="" scope="">
            value 속성에 들어갈 값
	      </c:set>
        - <c:set var="변수명" value="<%= 객체생성 %>" scope="영역"/>
          <c:set target="${var로 설정한 변수명 }" property="멤버변수 값" value="속성값"/>

    3) 속성
        - var : 변수명 설정함
        - value : 변수에 할당할 값
        - scope : 변수를 생성할 영역을 지정
            - default값 = page영역
        - target : 자바빈즈를 설정함
        - property : 자바빈즈의 속성, 즉 멤버변수 값 지정

5. <c:remove> 태그
    1) <c:set> 태그로 설정한 변수를 제거할때 사용
    2) <c:remove var="변수명" scope="영역"/>
        - var : 삭제할 변수명 설정
        - scope : 삭제할 병수의 영역 지정
            - default값 = 모든 영역의 변수 삭제

6. <c:if> 태그
    1) 자바의 if와 동일하지만 else를 사용하지 못하기에 단순 if 문만 가능
    2) 일반화
        - <c:if test="${조건식}" var="변수명" scope="영역">
            조건이 true일때 출력할 문장
	      </c:if>

            - test : 표현언어를 이용해 수행할 조건식 위치
            - var : 조건식의 결과값을 저장

7. <c:choose>, <c:when>, <c:otherwise> 태그
    1) switch문의 기능을 수행함
    2) 다중 조건을 통해 판단해야 할 때 사용
    3) 일반화
        - <c:choose>
            <c:when test="조건식1">조건식1을 만족하는 경우</c:when> 
            <c:when test="조건식2">조건식2를 만족하는 경우</c:when>
            ...
            <c:otherwise>모든 조건을 만족하지 않는 경우</c:otherwise>
	      </c:choose>

8. <c:forEach> 태그
    1) JSP 페이지에서 반복문을 수행
    2) 일반 for 문 형태
    3) 일반화
        - <c:forEach var="변수명"
                     items="반복할 객체이름"
                     begin="시작값" 
                     end="마지막값" 
                     step="증가값" 
                     varStatus="반복상태변수이름">
	
	      </c:forEach>

            - varStatus의 속성을 통해 얻을 수  있는 정보
                - current : var에 지정한 현재 루프의 변수 값 반환
                - index : var에 지정한 현재 루프의 변수 값 반환
                - count : 실제 반복 횟수 
                - first : 루프의 처음일때 true 반환
                - last : 루프의 마지막일때 true 반환
        
        - for문 대조
          <c:forEach var="변수명" begin="시작값" end="마지막값" step="증가값" />
	
	      for(int i=0; i<100 ; i += 2) {...}

        - 향상된 for문 대조
          <c:forEach var="변수명"  items=”반복할 객체이름(컬렉션)" />
	
	      for(int number : numbers) {...}
            
            - map forEach문
                <c:forEach var="변수명" items="${set한 map이름 }">
                    <ul>
                        <li>${변수명.key }이름 : ${변수명.value.멤버변수명1 }</li>
                        <li>${변수명.key }나이 : ${변수명.value.멤버변수명2 }</li>
                        ...
                    </ul>
                </c:forEach>

9. <c:forTokens> 태그
    1) 구분자를 기준으로 문자열을 나눠 토근의 개수만큼 반복해 줌
    2) 일반화
        - <c:forTokens items="문자열" delims="문자열 구분자" var="변수명"/>

10. <c:import> 태그
    1) <jsp:inclue> 액션태그와 같은 기능
    2) 외부파일을 현재 위치에 삽입할때 사용함
    3) 외부의 페이지도 삽입할 수 있음
    4) 일반화
        - <c:import url="페이지경로 혹은 url" scope="영역" var="변수명"/>
          ${변수명 }
        -  param으로 값 넘기기
            <c:import url="페이지경로 혹은 url" var="변수명">
                <c:param name="변수명1" value="값1" />
                <c:param name="변수명2" value="값2" />
            </c:import>
            ${변수명 }

11. <c:redirect> 태그
    1) 페이지 이동 처리
        - 매개변수를 전달하고 싶다면 <c:param>태그를 사용하면 됨
    2) 일반화
        - <c:redirect url="이동할 경로 및 url" context=""/>
        - param으로 값 넘기기
            <c:redirect url="이동할 경로 및 url">
                <c:param name="변수명1" value="${'값1' }" />
                <c:param name="변수명2" value="값2" />
                ...
            </c:redirect>
                - 받는 곳
                    ${param.변수명 } 으로 출력

12. <c:url> 태그
    1) 지정한 경로와 매개변수를 이용해서 url 생성함
        - 생성된 url은 <a>태그와 함께
    2) 일반화
        - <c:url value="설정한 경로" scope="영역" var="변수명"/> 

13. <c:out> 태그
    1) 변수 출력시 사용
        - 출력할 변수가 null일때 default 속성에 지정한 기본값 출력이 됨
        - escapeXml 속성을 true로 설정하면 특수기호를 그대로 출력함(기본값 : true)
    2) 일반화
        - <c:out value="출력할 변수" default="임의의 값" escapeXml="특수문자 변환 여부" />

14. <c:catch> 태그
    1) try catch 와 비슷한 내용
    3) 일반화
        - <c:catch var="변수명" >
	
	      </c:catch>
          메시지 출력 : ${변수명 }