1. Adapter View Class
    1) 화면에 표시된 수많은 항목을 손으로 쓸어넘기면서 봄
    2) 이때 사용되는 위젯이 어댑터 뷰임
    3) AdapterView
        - 배열이나 파일, 데이터베이스에 저장된 데이터를 화면에 표시할 때 유용한 뷰

2. View
    ↳ ViewGroup
        ↳ AdapterView
            ↳ ListView
            ↳ GridView
            ↳ Spinner
            ↳ Gallery

3. Adapter  
    1) 어댑터 뷰에 데이터를 공급하는 클래스 
    2) 개념적으로 데이터 소스와 어댑터 뷰 중간에 위치하여서 데이터 소스에서 데이터를 읽어와
       어댑터 뷰에 공급함
    3) ArrayAdapter
        - 배열에서 데이터를 가져오는 Adapter
    4) SimpleCursorAdapter
        - 데이터베이스에서 데이터를 가져오는 Adapter

4. ListView
    1) 항목들을 수직으로 보여주는 어댑터 뷰로서 상하로 스크롤이 가능     
    2) 문제점
        - 리스트 항목이 변경될 때마다, 매번 항목을 보여주는 뷰를 새로 생성해야 함
        - 만약 데이터 집합 크기가 큰 경우에 성능 저하 발생함.
    3) ListView의 개선뷰 : RecycleView

5. RecycleView
    1) 항목을 표시하기 위해 생성한 뷰를 재활용 한다 
    2) 뷰홀더(viewHolder) 패턴 사용함                
        - 뷰홀더 클래스를 정의해야 함(뷰를 가지고 있음)
        -   View Holders (UI에서 뷰 요소들을 채움)

            Adapter (뷰 홀더에 데이터를 연결함)

            Data set (뷰 홀더에 채울 항목들의 리스트)

    3) 뷰들을 재활용하기 때문에 빠르게 실행됨
    4) 2가지 배치 관리자 가능
        - LinearLAyoutManager
        - GridLayoutManager

    5) ViewHolder Class
        - 레이아웃을 포함하는 View의 wrapper class
        - RecyclerView.ViewHolder 상속받아서 정의함.

    6) Adpater Class
        - RecyclerView.Adapter 를 상속받음
        - getItemCount() : 아이템 개수 반환
        - onBindViewHolder : 뷰에 데이터를 연결함

    7) RecyclerView 구현단계
        - 표준 레이아웃 관리자 중 하나를 사용
        - 리스트에 있는 각 항목의 모양과 동작 방식 설계
            - ViewHolder 클래스 작성
        - Adapter 정의
            - 데이터와 ViewHolder를 연결함