1. 독자적인 사용자 인터페이스 컨트롤 사용
    1) 버튼, 리스트, 스크롤 바, 체크박스, 메뉴, 대화 상자 ...

2. 뷰와 뷰그룹
    1) View Class
        - 안드로이드 화면에서 실제로 사용하는 것들은 모두 View Class상속 받음.
        - 'Control' or 'widget'이라고도 함
            - Ex) 화면에서 버튼 (button widget) / 실제 코드에서 버튼 (button class)
        - UI(User Interface)를 구성하는 기초적인 빌딩 블록임.
    2) ViewGroup Class
        - 다른 위젯을 담을 수 있는 위젯
        - container 기능, layout 이라도 함 
            - 정해진 정책에 따라서 뷰들을 배치함
        - layout 은 ViewGroup Class 아래 존재
        - layout 도 크게보면 widget 에 포함됨
    3) XML 속성
        - Id 속성
            - 뷰의 식별자
            - java 코드에서 위제에 접근할때 id 속성에 지정한 아이디 사용
        - 화면에 보이기 속성
            - visible(0) : 디폴트 값
            - invisible(4) : 표시되지 않음 하지만 배치에서 공간을 차지함.
            - gone (8) : 완전히 숨겨짐
        - padding
            - 뷰의 경계와 뷰의 내용물 사이의 간격
        - margin
            - 자식 뷰 주위의 여백

3. 이벤트 처리
    1) 이벤트 처리 객체를 생성하여 컴포넌트에 등록
    2) 뷰 클래스의 이벤트 처리 메서드 재 정의
        - ex) 버튼에 붙은 리스너 객체가 이벤트를 처리함.
    3) 
    
        이벤트 리스너                   콜백메서드                  설명
        -------------------------------------------------------------------------
        View.OnClickListener        onClick()               사용자가 터치하면 호출됨
        View.OnKeyListener          onKey()                 키를 눌렀다가 놓았을때 호출 됨
        View.OnTouchListener        onTouch()               터치 이벤트 동작을 한 경우에 호출됨

4. 레이아웃
    1) 뷰들을 화면에 배치하는 방법
        - 뷰들의 위치와 크기를 결정함
    2) 종류
        - LinearLayout : 자식들을 수직이나 수평으로 배치
        - TableLayout : 자식들을 테이블 형태로 배치
            - 자식 뷰들을 테이블 형태로 배치
            - 하나의 테이블은 여러 개의 TableRow 객체로 이루어짐
                - TableRow 안에는 여러개의 셀들이 들어감.
        - GridLayout : 자식들을 바둑판 모양으로 배치
        - RelativeLayout : 자식들을 부모나 다른 자식에 상대적으로 배치
        - FrameLayout : 자식 뷰들은 등장하는 순서대로 화면에 표시됨
            - 이전에 추가된 자식 위에 새로운 자식이 중첩됨 
        ...