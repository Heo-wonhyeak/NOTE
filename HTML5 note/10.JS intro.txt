1. JavaScript란?
    1) 웹 브라우저에서 사용하기 위해 만들어진 프로그래밍 언어
    2) 웹 브라우저 상에서 UI를 동적으로 보여주기 위하여 사용
    3) Node.js 런타임을 통하여 서버 쪽에서도 사용할 수 있게 됨.
        - Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임.
        - 프로그래밍 언어가 동작하는 환경

2. 값과 변수
    1) 주석
        - 한줄 주석 //
        - 여러줄 주석 or 중간주석 /* */

    2) 변수 선언
        - let 키워드로 변수의 값을 지정함
            - 값이 변경될 수 있는 경우 (변경 가능)
            - 여러개 동시 선언 가능 (선언만도 가능)
        - const 키워드로 변수의 값을 지정함
            - 값을 절대 바꾸지 않는경우 (변경 불가!)
            - 여러개 동시 선언 가능 (선언과 동시에 초기화 해야함.)
        - var 키워드는 이제 사용하지 않는다

3. 데이터 종류(자료형)
    1) Number(숫자)
        - 정수 형식을 따로 제공하지 않음
    2) String(문자열)
        - '' "" 모두 사용가능 
            - 'hello'.substring(a,b);
                - a~b까지 잘라냄 (소수점 입력시 소수점 이하 버림)
    3) Boolean
        - 제어 구조 내에서 조건을 판단하는 곳에 주로 사용됨.
        - 산술연산에서 true 는 숫자1로, false는 숫자 0으로 변환됨.
        - 논리연산에서 0,undefined,null,NaN,"" 값은 false로 변환됨.
    4) null
        - 참조 타입과 함께 쓰여 어떠한 객체도 나타내지 않는 특수하 값
        - 논리연산에서 false로 변환됨, 산술 연산에서는 0으로, 문자열 연산에서는 "null"로 변환되어 연산됨.
    5) undefined
        - 변수 선언은 되었지만, 값이 할당된 적이 없는 변수에 접근한 경우
        - 존재하지 않는 객체의 프로퍼티에 접근할 경우 반환되는 값
        - 논리연산에서 false로 변환, 산술연산에서는 NaN으로, 문자열 연산에서는 'undefined'로 변환되어 연산됨.
    6) 배열(array)
        - 데이터 값들의 모음
        - zero-base 데이터
        - 배열의 원소 개수는 length 프로퍼티에 접근해 알 수 있음.
    7) 객체(object)
        - 이름이 붙은 값들(프로퍼티)의 모음
            - 프로퍼티 == key : value 형태
        - 중괄호 {}로 전체를 감쌈
        - 프로퍼티 명과 프로퍼티 값을 클론(:) 으로 구분함
        - 각각의 프로퍼티들은 콤마(,)로 분리해 작성
    8) 함수(function)
        - function 키워드에 이어 소괄호(()) 안에 함수 호출시 전달하는 인수들(arguments)에 의해 초기화 되는 매개변수(parameters) 목록
        - 중괄호 안에 수행해야 할 실행코드와 결과 값 반환하는 return 문으로 구성됨.
        - 형태
            변수명 : function () {
                실행코드
                return 결과
            }

4. 산술 연산자 (참조 - WebStorm 02.JS_Basic lab10.html)
    1) /는 연산자와 피 연산자가 모두 정수일지라도 항상 부동소수점 수를 결과로 반환.
        - 1/2 = 0
          1/2 = 0.5
    
    2) ** 연산자
        - 제곱
        - a ** b = a의 b승

    3) +=,++,--

5. 비교 연산자 (참조 - WebStorm 02.JS_Basic lab11.html)
    1) ==
        - 숫자,숫자 /문자열,문자열 비교의 경우 기본 비교
        - 문자열과 숫자를 비교할 경우, 숫자가 문자열로 변환되어 비교연산 수행
        - 숫자와 불린값을 비교할 경우 true = 1, false = 0 으로 변환되어 비교연산 수행
        - 부정 : !=
    2) ===
        - 비교 연산시 데이터 타입 변환은 수행하지 않음
        - 부정 : !==

6. 기타 연산자 (참조 - WebStorm 02.JS_Basic lab13.html)
    1) instanceof : 피 연산자의 객체 타입 조사
    2) delete : 해당 내용을 지움

7. Short Circuit Logical Operator(짧은 논리 회로 연산자) (참조 - WebStorm 03.JS_Basic lab04.html)
    1) && 연산자
        - 좌측 피 연산자의 평가 값을 true 로 반환할 수 있으면 우측 피연산자의 표현식을 평가할 수 있음.
            => If 문과 같은 기능을 수행
    2) || 연산자
        - 좌측 피 연산자의 평가 값이 false 로 반환할 수 있으면 우측 피 연산자의 표현식을 평가할 수 있음.
            => If 문과 같은 기능을 수행

8. 특수한 for문 (참조 - WebStorm 03.JS_Basic lab06.html)
    1) for of 루프 
        - 배열이나 문자열에 사용함.
        - 임의의 객체의 프로퍼티 값을 반복할 때는 for of 루프를 사용할 수 없음.
        - 값이 없는 경우(undefined)도 모두 출력됨.
            - for (const i of number) {
            console.log(`${i} : ${number[i]}`)
            }
            - for (const 변수명 of 배열) {
                document.writeln(변수명)
            } 
                - 향상된 for문 처럼 표현됨.
            - for (const 변수명 of 문자열) {
                document.writeln(변수명)
            } 
                - 한단어씩 표현됨
    2) for in 루프
        - 주어진 객체의 키를 방문함.
        - 값이 없는 경우 (undefined) 생략하고 출력됨.
            - for (const i in number) {
            console.log(`${i} : ${number[i]}`)
            }
            - for (const key in obj) {
                console.log(`${key} : ${obj[key]}`)
            }

    
9. null과 undefined
    1) 값의 부재 표현
    2) undefined 값
        - 변수를 선언했지만 초기화 하지 않은 경우.
    3) null 값
        - 의도적인 값의 부재를 의미함.

10. 리터럴(Literal)
    1) 프로그램 코드 상 데이터의 값을 표현하는 방식
    2) 숫자 리터럴, 문자열 리터럴, 배열 리터럴, 객체 리터럴, 함수 리터럴, 불린 리터럴, undefined/null 리터럴
        1] 숫자 리터럴
            - 상수
                - Infinity
                    - 무한대를 나타내는 특수한 숫자 값임 
                - isFinite() 
                    - true 값을 반환 하면 유한수를 의미
                    - false 값을 반환하면 해당 값은 Infinity값임
                - NaN (Not-A-Number)
                    - 숫자가 아님을 나타내는 특수한 '숫자'값
                    - isNaN() : true == 숫자가 아닌 값
                    - isNaN() : false == 숫자 값

        2] 문자열 리터럴
            1) single quatation 나 double quatation 으로 문자열 리터럴을 감쌈.
                - 'hello' or "hello"

        3]  템플릿 리터럴 
            1) 표현식을 포함 할 수 있음.
            2) 백틱(` 1[!] 옆) 으로 구분함.
                - `문자열 ${....}`
                    - 표현식을 평가한 다음, 필요하면 문자열로 변환되고 템플릿으로 함쳐짐.
                - ${...} 표현식 안에 템플릿 리터럴을 중첩할 수 있음.
                - 템플릿 안의 내용은 모두 그냥 출력됨 
                    - ex) enter key , / , ' , " etc...

11. 객체
    1) 이름/ 값 또는 프로퍼티의 집합
    2) 공개 데이터만 포함, 캡슐화 불가능, 동작 포함할수 없음
    3) 자바스크립트 객체는 특정 클래스의 인스턴스가 아니다
    4) 변수에 객체를 저장할 수 있음
        - . 표기법으로 객체의 프로퍼티에 접근 가능
    5) 기존 프로퍼티의 값을 바꾸거나 새 프로퍼티 추가 가능
        - 변경
            - 객체명.프로퍼티명 = '변경값'
        - 추가
            - 객체명.새프로퍼티명 = '값' 
    6) delete 연산자로 프로퍼티 삭제함.
        - 존재하지 않는 프로퍼티에 접근하면 undefined가 반환됨.

12. 배열
    1) '0','1','2' 처럼 프로퍼티 이름이 문자열인 객체
        - 숫자는 프로퍼티 이름으로 사용할 수 없으므로 문자열을 사용함
    2) 배열의 요소는 각자 다른 형식을 가질 수 있음
    3) 배열은 요소의 값을 갖지 않기도 함
    4) 모든 객체에서 존재하지 않는 프로퍼티는 undefined 값을 가짐
    5) 배열 끝에 새 요소를 추가할 수 있음
    6) 마지막 , 가 있는 경우 요소가 누락되었다는 의미가 아님
        - 확장성을 의미함.
    7) 배열은 객체이므로 필요한 프로퍼티가 있다면 배열에 추가할 수 있다.
    8) 고차원 배열은 없지만, 배열의 배열을 이용해서 고차원 배열 형태를 나타낼순 있다.

13. JSON
    1) JavaScript Object Notation
    2) 어플리케이션 간에 객체 데이터를 주고 받는 경량 텍스트 포맷임.
    3) 객체, 배열 리터럴을 자바스크립트 문법으로 표현하는데, 다음 제약이 있음
        - 객체 리터럴, 배열 리터럴, 문자열, 소수점 숫자, true, false, null을 값으로 사용함.
        - 모든 문자열은 ""(double quotation)으로 구분함.
        - 모든 프로퍼티 이름은 큰 따옴표로 구분함.
        - 맨 끝에 쉼표를 붙일 수 없으며, 요소를 생략할 수 없음.
    4) JSON 객체 메서드
        - JSON.stringify(객체, 변환함수, 공백개수)
            - 자바스크립트 객체를 JSON 문자열로 만듦
        - JSON.parse(문자열)
            - JSON 문자열을 자바스크립트 객체로 파싱함.

14. 예외란
    1) try...catch...finally 예외처리 기법
        try {
            // 정상적으로 처리되어야 할 코드
            // 코드 실행 중 런타임에서 에러 발생하여 예외가 발생하거나, 
        } catch(e) {
            // 예외가 발생할 경우에만 실행되는 블럭
        } finally {
            // 무조건 실행이 필요한 코드를 이 블록에 기술
        }